/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package src.main.java;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PeopleList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PeopleList\",\"namespace\":\"src.main.java\",\"fields\":[{\"name\":\"Version\",\"type\":\"int\"},{\"name\":\"People\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Person\",\"fields\":[{\"name\":\"FirstName\",\"type\":\"string\"},{\"name\":\"LastName\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"Gender\",\"symbols\":[\"FEMALE\",\"MALE\"]}},{\"name\":\"action\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"HEARTS\",\"DIAMONDS\",\"CLUBS\"]}]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int Version;
  @Deprecated public java.util.List<src.main.java.Person> People;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PeopleList() {}

  /**
   * All-args constructor.
   */
  public PeopleList(java.lang.Integer Version, java.util.List<src.main.java.Person> People) {
    this.Version = Version;
    this.People = People;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Version;
    case 1: return People;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Version = (java.lang.Integer)value$; break;
    case 1: People = (java.util.List<src.main.java.Person>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Version' field.
   */
  public java.lang.Integer getVersion() {
    return Version;
  }

  /**
   * Sets the value of the 'Version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.Version = value;
  }

  /**
   * Gets the value of the 'People' field.
   */
  public java.util.List<src.main.java.Person> getPeople() {
    return People;
  }

  /**
   * Sets the value of the 'People' field.
   * @param value the value to set.
   */
  public void setPeople(java.util.List<src.main.java.Person> value) {
    this.People = value;
  }

  /** Creates a new PeopleList RecordBuilder */
  public static src.main.java.PeopleList.Builder newBuilder() {
    return new src.main.java.PeopleList.Builder();
  }
  
  /** Creates a new PeopleList RecordBuilder by copying an existing Builder */
  public static src.main.java.PeopleList.Builder newBuilder(src.main.java.PeopleList.Builder other) {
    return new src.main.java.PeopleList.Builder(other);
  }
  
  /** Creates a new PeopleList RecordBuilder by copying an existing PeopleList instance */
  public static src.main.java.PeopleList.Builder newBuilder(src.main.java.PeopleList other) {
    return new src.main.java.PeopleList.Builder(other);
  }
  
  /**
   * RecordBuilder for PeopleList instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PeopleList>
    implements org.apache.avro.data.RecordBuilder<PeopleList> {

    private int Version;
    private java.util.List<src.main.java.Person> People;

    /** Creates a new Builder */
    private Builder() {
      super(src.main.java.PeopleList.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(src.main.java.PeopleList.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Version)) {
        this.Version = data().deepCopy(fields()[0].schema(), other.Version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.People)) {
        this.People = data().deepCopy(fields()[1].schema(), other.People);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PeopleList instance */
    private Builder(src.main.java.PeopleList other) {
            super(src.main.java.PeopleList.SCHEMA$);
      if (isValidValue(fields()[0], other.Version)) {
        this.Version = data().deepCopy(fields()[0].schema(), other.Version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.People)) {
        this.People = data().deepCopy(fields()[1].schema(), other.People);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'Version' field */
    public java.lang.Integer getVersion() {
      return Version;
    }
    
    /** Sets the value of the 'Version' field */
    public src.main.java.PeopleList.Builder setVersion(int value) {
      validate(fields()[0], value);
      this.Version = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'Version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'Version' field */
    public src.main.java.PeopleList.Builder clearVersion() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'People' field */
    public java.util.List<src.main.java.Person> getPeople() {
      return People;
    }
    
    /** Sets the value of the 'People' field */
    public src.main.java.PeopleList.Builder setPeople(java.util.List<src.main.java.Person> value) {
      validate(fields()[1], value);
      this.People = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'People' field has been set */
    public boolean hasPeople() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'People' field */
    public src.main.java.PeopleList.Builder clearPeople() {
      People = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public PeopleList build() {
      try {
        PeopleList record = new PeopleList();
        record.Version = fieldSetFlags()[0] ? this.Version : (java.lang.Integer) defaultValue(fields()[0]);
        record.People = fieldSetFlags()[1] ? this.People : (java.util.List<src.main.java.Person>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
